snippet ;;=
;;============================================================
;; $0
;;
endsnippet

snippet ;;-
;;------------------------------------------------------------
;; $0
;;
endsnippet

snippet clj
#?(:clj
   $0)
endsnippet

snippet @clj
#?@(:clj
    [$0])
endsnippet

snippet cljs
#?(:cljs
   $0)
endsnippet

snippet @cljs
#?@(:cljs
    [$0])
endsnippet

snippet jdbc
(jdbc/with-db-transaction [db-conn (req/db-pool req)]
  $0)
endsnippet

snippet rep
(reg-endpoint
  :${1:module}/${2:endpoint}
  {:path "/api/path/to/$2"
   :post {:auth :public
          :param-spec (s/keys :req-un [])
          :body-spec any?
          #?@(:clj [:handler (request-data/fn->handler $2)])}})
endsnippet

snippet redb
(rf/reg-event-db
  :${1:module}/${2:event}
  (fn [db _]
    $0
    db))
endsnippet

snippet refx
(rf/reg-event-fx
  :${1:module}/${2:event}
  (fn [{:keys [db]} _]
    $0))
endsnippet

snippet rpage
(reg-page
  :${1:module}/${2:page}
  {:path "/ui/$2"
   :auth :user
   :title [:$1 :$2 :title]
   #?@(:cljs [:init :$1/$2-init
              :render $2])})
endsnippet

snippet rsub
(rf/reg-sub
  :${1:event}
  (fn [db _]
    $0))
endsnippet

snippet rq-build
[erbium.modules.build.core :as build]
endsnippet

snippet rq-dbg
[erbium.common.dbg :refer [dbg]]
endsnippet

snippet rq-reg-endpoint
[erbium.common.endpoint-registry :refer [reg-endpoint]]
endsnippet

snippet rq-reg-page
[erbium.common.page-registry :refer [reg-page]]
endsnippet

snippet rq-server
[clojure.java.jdbc :as jdbc]
[erbium.server.db :as db]
[erbium.server.request-data :as request-data]
[erbium.server.web-util :as web-util]
endsnippet

snippet rq-util
[erbium.common.util :as util]
endsnippet

